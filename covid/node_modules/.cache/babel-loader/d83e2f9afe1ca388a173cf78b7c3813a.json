{"ast":null,"code":"import _classPrivateFieldLooseBase from \"E:/Fall2020/Studio/GIS/React/YARA/covid/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"E:/Fall2020/Studio/GIS/React/YARA/covid/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseKey\";\n// import countries from '../data/countries.json';\n// class LoadCountriesTask {\n//     load = (setState) => {\n//         setState(countries);\n//     };\n// }\n// export default LoadCountriesTask;\nimport papa from \"papaparse\";\nimport legendItems from \"../entities/LegendItems\";\nimport { features } from \"../data/countries.json\"; //    this.setState(features);\n\nvar _processCovidData = _classPrivateFieldLooseKey(\"processCovidData\");\n\nvar _setCountryColor = _classPrivateFieldLooseKey(\"setCountryColor\");\n\nvar _formatNumberWithCommas = _classPrivateFieldLooseKey(\"formatNumberWithCommas\");\n\nclass LoadCountryTask {\n  constructor() {\n    this.covidUrl = \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/web-data/data/cases_country.csv\";\n    this.setState = null;\n\n    this.load = setState => {\n      this.setState = setState;\n      papa.parse(this.covidUrl, {\n        download: true,\n        header: true,\n        complete: result => _classPrivateFieldLooseBase(this, _processCovidData)[_processCovidData](result.data)\n      });\n    };\n\n    Object.defineProperty(this, _processCovidData, {\n      writable: true,\n      value: covidCountries => {\n        for (let i = 0; i < features.length; i++) {\n          const country = features[i]; //console.log(country);\n\n          const covidCountry = covidCountries.find(covidCountry => country.properties.ISO_A3 === covidCountry.ISO3);\n          country.properties.confirmed = 0;\n          country.properties.confirmedText = 0;\n\n          if (covidCountry != null) {\n            let confirmed = Number(covidCountry.Confirmed);\n            country.properties.confirmed = confirmed;\n            country.properties.confirmedText = _classPrivateFieldLooseBase(this, _formatNumberWithCommas)[_formatNumberWithCommas](confirmed);\n          }\n\n          _classPrivateFieldLooseBase(this, _setCountryColor)[_setCountryColor](country);\n        }\n\n        this.setState(features);\n      }\n    });\n    Object.defineProperty(this, _setCountryColor, {\n      writable: true,\n      value: country => {\n        const legendItem = legendItems.find(item => item.isFor(country.properties.confirmed));\n        if (legendItem != null) country.properties.color = legendItem.color;\n      }\n    });\n    Object.defineProperty(this, _formatNumberWithCommas, {\n      writable: true,\n      value: number => {\n        return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n      }\n    });\n  }\n\n}\n\nexport default LoadCountryTask;","map":{"version":3,"sources":["E:/Fall2020/Studio/GIS/React/YARA/covid/src/Tasks/LoadCountriesTask.js"],"names":["papa","legendItems","features","LoadCountryTask","covidUrl","setState","load","parse","download","header","complete","result","data","covidCountries","i","length","country","covidCountry","find","properties","ISO_A3","ISO3","confirmed","confirmedText","Number","Confirmed","legendItem","item","isFor","color","number","toString","replace"],"mappings":";;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,SAASC,QAAT,QAAyB,wBAAzB,C,CACA;;;;;;;;AAEA,MAAMC,eAAN,CAAsB;AAAA;AAAA,SAClBC,QADkB,GAEd,2FAFc;AAAA,SAIlBC,QAJkB,GAIP,IAJO;;AAAA,SAMlBC,IANkB,GAMVD,QAAD,IAAc;AACjB,WAAKA,QAAL,GAAgBA,QAAhB;AAEAL,MAAAA,IAAI,CAACO,KAAL,CAAW,KAAKH,QAAhB,EAA0B;AACtBI,QAAAA,QAAQ,EAAE,IADY;AAEtBC,QAAAA,MAAM,EAAE,IAFc;AAGtBC,QAAAA,QAAQ,EAAGC,MAAD,gCAAY,IAAZ,wCAAmCA,MAAM,CAACC,IAA1C;AAHY,OAA1B;AAKH,KAdiB;;AAAA;AAAA;AAAA,aAgBGC,cAAD,IAAoB;AACpC,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,QAAQ,CAACa,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACtC,gBAAME,OAAO,GAAGd,QAAQ,CAACY,CAAD,CAAxB,CADsC,CAEtC;;AACA,gBAAMG,YAAY,GAAGJ,cAAc,CAACK,IAAf,CAChBD,YAAD,IAAkBD,OAAO,CAACG,UAAR,CAAmBC,MAAnB,KAA8BH,YAAY,CAACI,IAD5C,CAArB;AAIAL,UAAAA,OAAO,CAACG,UAAR,CAAmBG,SAAnB,GAA+B,CAA/B;AACAN,UAAAA,OAAO,CAACG,UAAR,CAAmBI,aAAnB,GAAmC,CAAnC;;AAEA,cAAIN,YAAY,IAAI,IAApB,EAA0B;AACtB,gBAAIK,SAAS,GAAGE,MAAM,CAACP,YAAY,CAACQ,SAAd,CAAtB;AACAT,YAAAA,OAAO,CAACG,UAAR,CAAmBG,SAAnB,GAA+BA,SAA/B;AACAN,YAAAA,OAAO,CAACG,UAAR,CAAmBI,aAAnB,+BAAmC,IAAnC,oDACID,SADJ;AAGH;;AACD,gFAAsBN,OAAtB;AACH;;AAED,aAAKX,QAAL,CAAcH,QAAd;AACH;AAtCiB;AAAA;AAAA;AAAA,aAwCEc,OAAD,IAAa;AAC5B,cAAMU,UAAU,GAAGzB,WAAW,CAACiB,IAAZ,CAAkBS,IAAD,IAChCA,IAAI,CAACC,KAAL,CAAWZ,OAAO,CAACG,UAAR,CAAmBG,SAA9B,CADe,CAAnB;AAIA,YAAII,UAAU,IAAI,IAAlB,EAAwBV,OAAO,CAACG,UAAR,CAAmBU,KAAnB,GAA2BH,UAAU,CAACG,KAAtC;AAC3B;AA9CiB;AAAA;AAAA;AAAA,aAgDSC,MAAD,IAAY;AAClC,eAAOA,MAAM,CAACC,QAAP,GAAkBC,OAAlB,CAA0B,uBAA1B,EAAmD,GAAnD,CAAP;AACH;AAlDiB;AAAA;;AAAA;;AAqDtB,eAAe7B,eAAf","sourcesContent":["// import countries from '../data/countries.json';\r\n\r\n// class LoadCountriesTask {\r\n//     load = (setState) => {\r\n//         setState(countries);\r\n//     };\r\n// }\r\n\r\n// export default LoadCountriesTask;\r\n\r\nimport papa from \"papaparse\";\r\nimport legendItems from \"../entities/LegendItems\";\r\nimport { features } from \"../data/countries.json\";\r\n//    this.setState(features);\r\n\r\nclass LoadCountryTask {\r\n    covidUrl =\r\n        \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/web-data/data/cases_country.csv\";\r\n\r\n    setState = null;\r\n\r\n    load = (setState) => {\r\n        this.setState = setState;\r\n\r\n        papa.parse(this.covidUrl, {\r\n            download: true,\r\n            header: true,\r\n            complete: (result) => this.#processCovidData(result.data),\r\n        });\r\n    };\r\n\r\n    #processCovidData = (covidCountries) => {\r\n        for (let i = 0; i < features.length; i++) {\r\n            const country = features[i];\r\n            //console.log(country);\r\n            const covidCountry = covidCountries.find(\r\n                (covidCountry) => country.properties.ISO_A3 === covidCountry.ISO3\r\n            );\r\n\r\n            country.properties.confirmed = 0;\r\n            country.properties.confirmedText = 0;\r\n\r\n            if (covidCountry != null) {\r\n                let confirmed = Number(covidCountry.Confirmed);\r\n                country.properties.confirmed = confirmed;\r\n                country.properties.confirmedText = this.#formatNumberWithCommas(\r\n                    confirmed\r\n                );\r\n            }\r\n            this.#setCountryColor(country);\r\n        }\r\n\r\n        this.setState(features);\r\n    };\r\n\r\n    #setCountryColor = (country) => {\r\n        const legendItem = legendItems.find((item) =>\r\n            item.isFor(country.properties.confirmed)\r\n        );\r\n\r\n        if (legendItem != null) country.properties.color = legendItem.color;\r\n    };\r\n\r\n    #formatNumberWithCommas = (number) => {\r\n        return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n    };\r\n}\r\n\r\nexport default LoadCountryTask;\r\n"]},"metadata":{},"sourceType":"module"}